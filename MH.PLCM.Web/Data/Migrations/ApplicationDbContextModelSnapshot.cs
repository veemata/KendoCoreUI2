// <auto-generated />
using System;
using MH.PLCM.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MH.PLCM.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MH.PLCM.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("Company")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContributionLevel")
                        .HasColumnType("int");

                    b.Property<int>("Department")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoEngArtworkRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ArtWorkOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("BackPanel")
                        .HasColumnType("int");

                    b.Property<int?>("CautionStatement")
                        .HasColumnType("int");

                    b.Property<string>("DoubleseamLocation")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("FilterTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<int?>("IsNewPart")
                        .HasColumnType("int");

                    b.Property<int?>("IsUlListing")
                        .HasColumnType("int");

                    b.Property<int?>("NumOfTurns")
                        .HasColumnType("int");

                    b.Property<int?>("Panel1")
                        .HasColumnType("int");

                    b.Property<int?>("Panel2")
                        .HasColumnType("int");

                    b.Property<int?>("Panel3")
                        .HasColumnType("int");

                    b.Property<int?>("Panel4")
                        .HasColumnType("int");

                    b.Property<decimal?>("PanelCenterLine")
                        .HasColumnType("decimal(8, 4)");

                    b.Property<int?>("PlateOrientation")
                        .HasColumnType("int");

                    b.Property<int?>("RequestorId")
                        .HasColumnType("int");

                    b.Property<string>("RunOnLine")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SpecialInstructions")
                        .HasColumnType("ntext");

                    b.Property<int?>("Style")
                        .HasColumnType("int");

                    b.Property<int?>("TorqueNumbers")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("NACO_EngArtworkRequest");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoEngArtworkRequestPlate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("ArkworkRequestId")
                        .HasColumnType("bigint");

                    b.Property<string>("CatalogNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Filetype")
                        .HasColumnName("filetype")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Numbers99")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UlApproved")
                        .HasColumnName("ulApproved")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArkworkRequestId");

                    b.ToTable("NACO_EngArtworkRequestPlate");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoEngineering", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<double>("CustomerSafetyStock")
                        .HasColumnType("float");

                    b.Property<long?>("DeptCodeId")
                        .HasColumnType("bigint");

                    b.Property<int?>("DesignValidationLevel")
                        .HasColumnType("int");

                    b.Property<long?>("DesignerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("EngineerId")
                        .HasColumnType("bigint");

                    b.Property<long>("FirstShipId")
                        .HasColumnType("bigint");

                    b.Property<int?>("IsPpaprequired")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IsPPAPRequired")
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<int?>("IsPurchasedProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<byte>("IsSupPpaprequired")
                        .HasColumnName("IsSupPPAPRequired")
                        .HasColumnType("tinyint");

                    b.Property<int?>("IsUlListing")
                        .HasColumnType("int");

                    b.Property<string>("ManufacturerPartNumber")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("PackagingFilterTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("PpapdueDateOn")
                        .HasColumnName("PPAPDueDateOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("PpaplevelId")
                        .HasColumnName("PPAPLevelId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Ppapqty")
                        .HasColumnName("PPAPQty")
                        .HasColumnType("int");

                    b.Property<string>("PurchasedEleSupplier")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QualityContact")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("QualityContactPhone")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("SupplierPartNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ToolingPaidBy")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("TotalDueDateOn")
                        .HasColumnType("datetime");

                    b.Property<double?>("TotalToolingCost")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("NACO_Engineering");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoFilter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ElementHeight")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ElementIdentinfication")
                        .HasColumnType("int");

                    b.Property<string>("ElementLength")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<int?>("ElementThread")
                        .HasColumnType("int");

                    b.Property<string>("ElementWidth")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("FilterWeight")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("Identification")
                        .HasColumnType("nvarchar(2500)")
                        .HasMaxLength(2500);

                    b.Property<string>("IdmethodId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("IDMethodId")
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('None')")
                        .HasMaxLength(50);

                    b.Property<int?>("Inkcolor1")
                        .HasColumnType("int");

                    b.Property<int?>("Inkcolor2")
                        .HasColumnType("int");

                    b.Property<int?>("InkpartNumber1")
                        .HasColumnType("int");

                    b.Property<int?>("InkpartNumber2")
                        .HasColumnType("int");

                    b.Property<string>("InnerDiameterBottom")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("InnerDiameterLabelPartNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<string>("InnerDiameterTop")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("MasterPlatePartNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OuterDiameterBottom")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<string>("OuterDiameterTop")
                        .HasColumnType("nvarchar(15)")
                        .HasMaxLength(15);

                    b.Property<long?>("PaintColorId")
                        .HasColumnType("bigint");

                    b.Property<int?>("PaintPartNumber")
                        .HasColumnType("int");

                    b.Property<string>("PaintPlateIdentification")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PlateOrientation")
                        .HasColumnType("int");

                    b.Property<string>("PrintPlate1PartNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<string>("PrintPlate2PartNo")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NACO_Filter");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ChangeDescription")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<long?>("ChangeOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ChangedOn")
                        .HasColumnType("datetime");

                    b.Property<int?>("ChangingUserId")
                        .HasColumnType("int");

                    b.Property<string>("Filename")
                        .HasColumnType("varchar(250)")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("NACO_History");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoMss", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActualEoq")
                        .HasColumnName("ActualEOQ")
                        .HasColumnType("int");

                    b.Property<int?>("ActualInitialRun")
                        .HasColumnType("int");

                    b.Property<float?>("ActualStandardCost")
                        .HasColumnType("real");

                    b.Property<long?>("BillOfLadingId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Noqmoq")
                        .HasColumnName("NOQMOQ")
                        .HasColumnType("int");

                    b.Property<long?>("OrderIntervalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlannerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("ScheduledOn")
                        .HasColumnType("datetime");

                    b.Property<long?>("SelectionCodeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NACO_MSS");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoNewPart", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("Complete")
                        .HasColumnType("bit");

                    b.Property<string>("DrawingFile")
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<int?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<string>("Nprev")
                        .HasColumnName("NPrev")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("Npsheet")
                        .HasColumnName("NPsheet")
                        .HasColumnType("varchar(5)")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PpapLevel")
                        .HasColumnType("int");

                    b.Property<int?>("PpapQty")
                        .HasColumnType("int");

                    b.Property<bool?>("PrintComplete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrintCompletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("PrintReleased")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PrintReleasedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ProductCode")
                        .HasColumnType("bit");

                    b.Property<string>("PurchaseMenu")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ToolingCost")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ToolingDueDateOn")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ToolingOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("ToolingOrdered")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NACO_NewPart");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoPackaging", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("BarCodeId")
                        .HasColumnType("bigint");

                    b.Property<string>("BoxCountry")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxGraphics")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxLabel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxMaterial")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxPrint")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("BoxSize")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonCountry")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonGraphics")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonLabel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonLabelQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonOther")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonSize")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("CartonStenmark")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DateCodeSpec")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("I2of5")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("IsRoundFullCarton")
                        .HasColumnType("int");

                    b.Property<int?>("IsUpcPrefix")
                        .HasColumnType("int");

                    b.Property<string>("OtherPackaging")
                        .HasColumnType("varchar(5000)")
                        .HasMaxLength(5000)
                        .IsUnicode(false);

                    b.Property<bool?>("PackagingVerified")
                        .HasColumnType("bit");

                    b.Property<int?>("PackagingVerifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PackagingVerifiedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("PalletBottomPad")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletCapacity")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletCapacityQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletCartons")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletCountry")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletDetail")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletDetailNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletLabel")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PalletLabelQty")
                        .HasColumnType("nvarchar(8)")
                        .HasMaxLength(8);

                    b.Property<int?>("PalletNumLayers")
                        .HasColumnType("int");

                    b.Property<string>("PalletPad")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletPadQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletPartitions1")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletPartitions1Qty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletPartitions2")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletPartitions2Qty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletQty")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<string>("PalletTube")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PalletTubeQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("PrintingPlateNumber")
                        .HasColumnType("int");

                    b.Property<string>("ProtectiveWrapBoxLabel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapCartonLabel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapCountry")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapLabel")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapLabelQty")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapOther")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapPartNum")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapQuantity")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapSize")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("ProtectiveWrapStyle")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<long?>("StdPackId")
                        .HasColumnType("bigint");

                    b.Property<int?>("StdSkId")
                        .HasColumnType("int");

                    b.Property<string>("Upc")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("_3of9")
                        .HasColumnName("3of9")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NACO_Packaging");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoPackagingValImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ChangeOrderId")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int?>("UploadedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UploadedOn")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("NACO_PackagingValImages");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoQuality", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AdditionalNotes")
                        .HasColumnType("ntext");

                    b.Property<bool?>("IsChkdBarcodeCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdBoxCloses")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdBoxCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdFilterBoxCloses")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdGraphicIdentCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdLblCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdPackAccToPrint")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdPalletDetail")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdPalletDetailCorrect")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdToPrint")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsChkdfilterBox")
                        .HasColumnType("bit");

                    b.Property<int?>("IsComplete")
                        .HasColumnType("int");

                    b.Property<decimal?>("PackHeight")
                        .HasColumnType("decimal(8, 4)");

                    b.Property<decimal?>("PackLength")
                        .HasColumnType("decimal(8, 4)");

                    b.Property<string>("PackWeight")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<decimal?>("PackWidth")
                        .HasColumnType("decimal(8, 4)");

                    b.Property<string>("StandardPackWeight")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("NACO_Quality");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoTrigger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionTookOn")
                        .HasColumnType("datetime");

                    b.Property<long>("ChangeOrderId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Department")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<long?>("FromUserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastReminderOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("RemindDays")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((3))");

                    b.Property<int?>("ToUserId")
                        .HasColumnType("int");

                    b.Property<string>("What")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(200)")
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("NACO_Trigger");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoValidation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("ChangeOrderId")
                        .HasColumnType("bigint");

                    b.Property<int?>("CompletedById")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedOn")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsComplete")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRequired")
                        .HasColumnType("bit");

                    b.Property<long?>("ValidationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("NACO_Validations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MH.PLCM.Models.NacoEngArtworkRequestPlate", b =>
                {
                    b.HasOne("MH.PLCM.Models.NacoEngArtworkRequest", "ArkworkRequest")
                        .WithMany("NacoEngArtworkRequestPlates")
                        .HasForeignKey("ArkworkRequestId")
                        .HasConstraintName("FK_NACO_EngArtworkRequestPlate_NACO_EngArtworkRequest")
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MH.PLCM.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MH.PLCM.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MH.PLCM.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MH.PLCM.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
